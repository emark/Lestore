#!/usr/bin/env perl

use strict;
use lib "/home/hosting_locumtest/usr/local/lib/perl5";
use Mojolicious::Lite;
use Mojo::UserAgent;
use DBIx::Custom;
use Date::Parse;

use utf8;
use v5.10.0;

open (DBCONF,"< app.conf") || die "Error open dbconfig file";
my @appconf=<DBCONF>;
close DBCONF;
chomp @appconf;
our $dbi = DBIx::Custom->connect(
            dsn => $appconf[0],
            user => $appconf[1],
            password => $appconf[2],
            option => {mysql_enable_utf8=>1}
);
my $discounts = {split /,/, $appconf[3]};

$dbi->do('SET NAMES utf8');

get '/' => sub {
	my $self = shift;
	my $page = {
		url => 'index',
	};

	my $msg = "Система учета заказов. ООО Электронный маркетинг 2012";
	$self->stash(
		page => $page,
		msg => $msg,
	);
	$self->render('index');	
};

get '/searchorder/' => sub{
	my $self = shift;
	my $orderid = $self->param('id');
	my $cartid = $dbi->select(
		table => 'orders',
		column => 'cartid',
		where => {id => $orderid},
	)->value;
	$self->redirect_to("/orders/$cartid");
};

post '/orders/new/' => sub{
	my $self = shift;	
	my $cartid = time;
	my $rvcode = int(rand(999));	
	my $customer = {
		'person' => $self->param('person'),
		'tel' => $self->param('tel'),
		'email' => $self->param('email'),
		'delivery' => $self->param('delivery'),
		'payment' => $self->param('payment'),
		'address' => $self->param('address'),
		'comments' => $self->param('comments'),
		'storename' => $self->param('storename'),
		'discount' => $self->param('discount'),
		'cartid' => $cartid,
		'status' => 0,
		'rvcode' => $rvcode,
	};
	
	$dbi->insert(
		$customer,
		table => 'orders',
	);

	my @pid = $self->param('productid');
	my @pcnt = $self->param('count');
	my @ptitle = $self->param('title');
	my @pprice = $self->param('price');
	my @pdiscount = $self->param('productdiscount');

	my @productid = ();
	my @count = ();
	my @title = ();
	my @price = ();
	my @discount = ();
	my $n = 0;	
	my $i = 0;
	for ($i=0; $i<@pid; $i++){
		if($pcnt[$i] && $pcnt[$i]>0){
			$productid[$n] = $pid[$i];
			$count[$n] = $pcnt[$i];
			$title[$n] = $ptitle[$i];
			$price[$n] = $pprice[$i];
			$discount[$n] = $pdiscount[$i];
			$n++;
		};
	};
	
	for ($i=0;$i<$n;$i++){
		$dbi->insert(
			{
				productid => $productid[$i],
				title => $title[$i],
				count => $count[$i],
				price => $price[$i],
				cartid => $cartid,
				discount => $discount[$i],
			},
			table => 'items',
		);
	};

	$self->redirect_to('/orders/status/');
};

get '/orders/new/' => sub{
	my $self = shift;
	my $page = {
		'url' => 'orders',
	};
	my $result = $dbi->select(
		table => 'products',
	);

	my $reserved = $dbi->select(
        table => 'items',
        column => ['items.productid','count(items.count)'],
        where => {'orders.status' => 1},
        append => 'group by items.productid',
        join => ['left outer join orders on orders.cartid = items.cartid'],
    );

	$self->stash(
		page => $page,
		products => $result->fetch_hash_all,
		reserved => $reserved->fetch_all,
	);
	$self->render('neworder');
};

get '/orders/status/:orderstatus/' => {orderstatus => 0} => sub{
	my $self = shift;
	my $status = $self->param('orderstatus');
	my $page = {
		url => 'orders',
	};

	my $result = $dbi->select(
		table => 'orders',
		where => {status => $status},
	);

	$self->stash(
		page => $page,
		orders => $result->fetch_hash_all,
		orderstatus => $status,
	);
	$self->render('orders');
};

get '/orders/:cartid/' => sub{
	my $self = shift;
	my $page = {
		url => 'orders',
	};
	my $cartid = $self->param('cartid');

	my $result = $dbi->select(
		table => 'orders',
		where => {cartid => $cartid},
	);
	
	my $order = $result->fetch_hash_one;
	
	$result = $dbi->select(
		table => 'items',
		where => {cartid => $cartid},
	);
	
	my $items = $result->fetch_hash_all;
	
	$result = $dbi->select(
		table => 'discounts',
		where => {name => $order->{discount}},
	);
	
	my $discount = $result->fetch_hash_one;
	$discount->{discount} = 0 if !$discount;
	
	$self->stash(
		page => $page,
		order => $order,
		items => $items,
		discount => $discount,
	);	
	$self->render('orderscartid');
};

post '/orders/:cartid/writeoff/' => sub{
	my $self = shift;
	my $cartid = $self->param('cartid');
	my $writeoff = $self->param('writeoff');
	my @productid = $self->param('productid');
	my @count = $self->param('count');
	my %update = ();

	my $result = $dbi->select(
		table => 'products',
		column => ['id','instore'],
	);

	while (my $row = $result->fetch_hash){
		for(my $i=0; $i<@productid; $i++){
			if($productid[$i] == $row->{id}){
				if($writeoff == 1){
					$update{$row->{id}} = $row->{instore}-$count[$i];
				}else{
					$update{$row->{id}} = $row->{instore}+$count[$i];
				};
			};
		};
	};
	
	foreach my $productid (keys %update){
		$dbi->update(
			{
				instore => $update{$productid},
				lastmod => \"NOW()",
			},
			table => 'products',
			where => {id => $productid},
		);
	};

	$dbi->update(
		{writeoff => $writeoff},
		table => 'orders',
		where => {cartid => $cartid},
	);
	
	$self->stash(
		page => {url => 'orders'},
		msg => "Статус списания товаров по заявке <a href=\"/orders/$cartid\">$cartid</a> изменен.",
	);
	$self->render('index');
};

get '/orders/:cartid/add' => sub{
	my $self = shift;
    my $page = {
        'url' => 'orders',
    };
    my $result = $dbi->select(
        table => 'products',
    );

	my $reserved = $dbi->select(
        table => 'items',
        column => ['items.productid','count(items.count)'],
        where => {'orders.status' => 1},
        append => 'group by items.productid',
        join => ['left outer join orders on orders.cartid = items.cartid'],
    );

    $self->stash(
        page => $page,
        products => $result->fetch_hash_all,
        reserved => $reserved->fetch_all,
    );
};

get '/orders/:cartid/checkstore' => sub{
	my $self = shift;
	my $page = {
		'url' => 'orders',
	};
	my $cartid = $self->param('cartid');
	
	my $checkitems = $dbi->select(
		table => 'items',
		column => ['productid','count'],
		where => {cartid => $cartid},
	);
	my $activeorders = $dbi->select(
		table => 'orders',
		column => ['cartid'],
		where => {status => 1},
	)->values;
	my $reserved = $dbi->select(
		table => 'items',
		column => ['productid','count'],
		where => {cartid => $activeorders},
	);
	my $store = $dbi->select(
		table => 'products',
		column => ['id','instore','title'],
	);
		
	$self->stash(
		checkitems => $checkitems->fetch_hash_all,
		reserved => $reserved->fetch_hash_all,
		instore => $store->fetch_hash_all,
		page => $page,
		msg => 'ttt',
	);
	$self->render('checkstore');
};

get '/orders/:cartid/discount/:operation/:discountid' => {discountid => 0} => sub{
    my $self = shift;
    my $page = {
        'url' => 'orders',
    };

	my $cartid = $self->param('cartid');
	my $operation = $self->param('operation');	
	my $discountid = $self->param('discountid');
	my $msg = "Обновление {$operation} дисконта по заявке <a href=\"/orders/$cartid\">$cartid</a> выполнено.";

	for($operation){
		if(/update/){
		    my $result = $dbi->select(
	        table => 'items',
			where => {cartid => $cartid},
		    );
	
			my $total_cart = 0;
			my $discount->{discount} = 0;
			$discount->{name} = '';

			while(my $row = $result->fetch_hash){
				$total_cart = $total_cart+$row->{price}*$row->{count};
			};

			foreach my $key (keys %{$discounts}){
				if ($total_cart > $key && $discount->{discount} < $discounts->{$key}){
					$discount->{name} = $cartid;
					$discount->{discount} = $discounts->{$key};
				};
			};

			$dbi->update(
				{discount => $discount->{name}},
				table => 'orders',
				where => {cartid => $cartid},
			);

			if($discount->{discount}>0){
				if($discountid){
					$dbi->update(
						$discount,
						table => 'discounts',
						where => {id => $discountid},
					);
				}else{
					$dbi->insert(
						$discount,
						table => 'discounts',
					);
				};
			}else{
				if($discountid){
					$dbi->delete(
						table => 'discounts',
						where =>  {id => $discountid},
					);
				};
			};
		}elsif(/close/){
			$dbi->update(
				{closed => $cartid},
				table => 'discounts',
				where => {id => $discountid}
			);	
		}elsif(/clear/){
			$dbi->update(
				{discount => ''},
				table => 'orders',
				where => {cartid => $cartid},
			);
		}else{
			$msg = "Данное действие дисконта для заказа <a href=\"/orders/$cartid\">$cartid</a>  не определено.";
		}
	};
	$self->stash(
        page => {url => 'orders'},
		msg => $msg,
    );

    $self->render('index');
};

post '/orders/:cartid/task/:operation' => sub{
	my $self = shift;
	my $cartid = $self->param('cartid');
	my $operation = $self->param('operation');
	my @tasks = $self->param('task');
	my $msg = $self->param('msg');
	my $task = join('',@tasks);

	for($operation){
		if(/add/){
			$task = $task.$msg.'^'.time().'#' if ($msg);
			$dbi->update(
				{task => $task},
				table => 'orders',
				where => {cartid => $cartid}
			);
		}elsif(/delete/){
		};
	};

	$self->stash(
		page => {url => 'orders'},
		msg => "Обновление {$operation} комментариев к заказу <a href=\"/orders/$cartid/\">$cartid</a> выполнено."
	);
	$self->render('index');
};

post '/orders/:cartid/add' => sub{
	my $self = shift;
	my $cartid = $self->param('cartid');
	my @pid = $self->param('productid');
    my @pcnt = $self->param('count');
    my @ptitle = $self->param('title');
    my @pprice = $self->param('price');
	my @pdiscount = $self->param('productdiscount');

    my @productid = ();
    my @count = ();
    my @title = ();
    my @price = ();
	my @discount = ();
    my $n = 0;
    my $i = 0;
    for ($i=0; $i<@pid; $i++){
        if($pcnt[$i] && $pcnt[$i]>0){
            $productid[$n] = $pid[$i];
            $count[$n] = $pcnt[$i];
            $title[$n] = $ptitle[$i];
            $price[$n] = $pprice[$i];
			$discount[$n] = $pdiscount[$i];
            $n++;
        };
    };

    for ($i=0;$i<$n;$i++){
        $dbi->insert(
            {
                productid => $productid[$i],
                title => $title[$i],
                count => $count[$i],
                price => $price[$i],
                cartid => $cartid,
				discount => $discount[$i],
            },
            table => 'items',
        );
    };

	$self->stash(
        page => {url => 'orders'},
        msg => "Товары по заявке <a href=\"/orders/$cartid\">$cartid</a> добавлены.",
    );
    $self->render('index');
};

post '/orders/:cartid/' => sub{
	my $self = shift;
	my $page = {
		url => 'orders',
	};
	my $cartid = $self->param('cartid');
    my $customer = {
        'person' => $self->param('person'),
        'tel' => $self->param('tel'),
        'email' => $self->param('email'),
        'delivery' => $self->param('delivery'),
        'payment' => $self->param('payment'),
        'address' => $self->param('address'),
		'storename' => $self->param('storename'),
        'comments' => $self->param('comments'),
        'status' => $self->param('orderstatus'),
    };

    $dbi->update(
        $customer,
        table => 'orders',
		where => {cartid => $cartid},
    );

    my @productid = $self->param('productid');
    my @count = $self->param('count');
	my $i = 0;
	my $x = 0;
    for ($i=0; $i < @productid; $i++){
		if($count[$i] && $count[$i] > 0){
	        $dbi->update(
    	        {
        	        count => $count[$i],
            	},
	            table => 'items',
				where => {cartid => $cartid, productid => $productid[$i]},
        	);
			$x = $dbi->last_sql;
		}else{
			$dbi->delete(
				table => 'items',
				where => {cartid => $cartid, productid => $productid[$i]},
			);
		};
    };
	
	my $msg = "Заявка <a href=\"/orders/$cartid/\">$cartid</a> изменена";
	$self->stash(
		page => $page, 
		msg => $msg,
	);
	$self->render('index');
};

get '/store/' => sub{
	my $self = shift;
	my $page = {
		url => 'store',
	};
	my $products = $dbi->select(
		table => 'products'
	);
	
	my $category = $dbi->select(
        table => 'catalog',
        column => ['url','caption'],
        where => {type => 0},
    );

	my $reserved = $dbi->select(
		table => 'items',
		column => ['items.productid','count(items.count)'],
		where => {'orders.status' => 1},
		append => 'group by items.productid',
		join => ['left outer join orders on orders.cartid = items.cartid'],
	);

    $self->stash(
        page => $page,
        products => $products->fetch_hash_all,
        category => $category->fetch_hash_all,
		reserved => $reserved->fetch_all,
    );
};

get '/store/category/:caturl' => sub{
	my $self = shift;
	my $caturl = $self->param('caturl');
    my $page = {
        url => 'store',
    };
    my $products = $dbi->select(
        table => 'products',
		where => {caturl => $caturl}
    );

	my $category = $dbi->select(
		table => 'catalog',
		column => ['url','caption'],
		where => {type => 0},
	);

	my $reserved = $dbi->select(
		table => 'items',
		column => ['items.productid','count(items.count)'],
		where => {'orders.status' => 1},
		append => 'group by items.productid',
		join => ['left outer join orders on orders.cartid = items.cartid'],
	);

    $self->stash(
        page => $page,
        products => $products->fetch_hash_all,
        category => $category->fetch_hash_all,
		reserved => $reserved->fetch_all,
    );

	$self->render('store');
};

get '/store/reserved/' => sub{
	my $self = shift;
	my $page = {
		url => 'store'
	};
	my $result = $dbi->select(
		table => 'items',
		column => [
			'items.title as title',
			'items.count',
			'items.price',
			'items.cartid',
			'items.productid',
			'orders.id as orderid',
		],
		where => {'orders.status' => 1},
		join => ['left join orders on orders.cartid=items.cartid'],

	);
	
	$self->stash(
		page => $page,
		items => $result->fetch_hash_all,
	);
	
	$self->render('storereserved');
};


post '/store/' => sub{
	my $self = shift;

	my @productid = $self->param('productid');
    my @count = $self->param('count');

	my %update = ();

    my $result = $dbi->select(
        table => 'products',
        column => ['id','instore'],
    );

    while (my $row = $result->fetch_hash){
        for(my $i=0; $i<@productid; $i++){
            if($count[$i]){
                    $update{$row->{id}} = $row->{instore}+$count[$i] if ($productid[$i] == $row->{id});
            };
        };
    };

    foreach my $productid (keys %update){
        $dbi->update(
            {
				instore => $update{$productid},
				lastmod => \"NOW()",
			},
            table => 'products',
            where => {id => $productid},
        );
    };

	$self->stash(
		page => {url => 'index'},
		msg => 'Обновлены остатки по выбранным товарам',
	);
    $self->render('index');
};

get '/tasks/' => sub{
	my $self = shift;
	my $page = {
		url => 'tasks',
	};
	my $result = $dbi->select(
		table => 'orders',
		columns => 'tasks',
		where => {status => '1'},
	);
	
	$self->stash(
		page => $page,
		tasks => $result->fetch_hash_all,
	);
};

get '/store/:productid/' => sub{
	my $self = shift;
	my $page = {
		url => 'store'
	};

	my $result = $dbi->select(
		table => 'products',
		where => {id => $self->param('productid')},
	)->fetch_hash;
	
	$self->stash(
		page => $page,
		product => $result,
	);
};

app->start;
